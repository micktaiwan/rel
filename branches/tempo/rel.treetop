grammar Rel

	rule command
  		affectation / calcul / couple
  	end

	rule affectation
		symbol s '=' s set {
  			def action
  				'a_affectation'
  			end
  		}
	end

	rule symbol
		[A-Z] [a-z]*
	end
	
	rule set
		'{' s couples s '}' {
			def value
				couples.value
			end
		}
	end

	rule couples
		couples_b
		/
		couple?
	end
	
	rule couples_b
		couple ',' couples_b
		 {
			def value
				rv = [] if !rv
				rv << couple.value
				rv += couples_b.value
				rv
			end
		}
		 / couple
 	end

	rule couple
		'(' s n1:number s ',' s n2:number s ')' {
			def value
				[n1.value,n2.value]
			end
		}
	end
	
	rule number
		'0' / [1-9] [0-9]* {
			def value
				text_value.to_i
			end
		}			
	end

	rule calcul
		display
	end

	rule display
		symbol {
  			def action
  				'a_display'
  			end
  		}
	end

	rule s
		' '*
	end
	
end
