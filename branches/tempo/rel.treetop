grammar Rel

	rule commands
		command ';' commands
		/
		command
	end

	rule command
  		affectation / calcul
  	end

	rule affectation
		symbol s '=' s calcul {
  			def action
  				'a_affectation'
  			end
  		}
	end

	rule symbol
		[A-Z] [a-z]*
	end
	
	rule set
		'{' s '}' {def value;[];end}
		/
		'{' s couples s '}' {
			def value
				couples.value.uniq
			end
		}
	end

	rule couples
		couple ',' couples {
			def value
				couple.value + couples.value
			end
		}
		/
		couple
	end

	rule couple
		'(' s n1:number s ',' s n2:number s ')' {
			def value
				[[n1.value,n2.value]]
			end
		}
	end
	
	rule number
		'0' / [1-9] [0-9]* {
			def value
				text_value.to_i
			end
		}			
	end

	rule calcul
		set / symbol# / inter
	end

	rule display
		symbol {
  			def action
  				'a_display'
  			end
  		}
	end

	#rule inter
	#	union '/' calcul 
	#end
	
	#A + B / C

	rule s
		' '*
	end
	
end
