grammar Rel

	rule commands
		s command s ';' s commands s {
			def action
				'a_commands'
			end
			}
		/ 
		command 
	end

	rule command
  		affectation / calcul / list_symbols
  	end
  	
  	rule list_symbols
  		'sym' {
  			def action
  				'a_list_symbols'
  			end
  			}
  	end

	rule affectation
		symbol s '=' s calcul {
  			def action
  				'a_affectation'
  			end
  		}
	end

	rule symbol
		[A-Z] [a-z]* {
#			def action
#				'a_symbol'
#			end
			
			def value
				get_symbol(text_value.to_s)
			end
		}
	end
	
	rule set
		'{' s '}' {def value;[];end}
		/
		'{' s couples s '}' {
			def value
				couples.value.uniq
			end
		}
	end

	rule couples
		couple ',' couples {
			def value
				couple.value + couples.value
			end
		}
		/
		couple
	end

	rule couple
		'(' s n1:number s ',' s n2:number s ')' {
			def value
				[[n1.value,n2.value]]
			end
		}
	end
	
	rule number
		'0' / [1-9] [0-9]* {
			def value
				text_value.to_i
			end
		}			
	end

	rule calcul
		union  {
			def action
				'a_calcul'
			end
		}
	end

#	rule union
#		inter s union_op s union {
#			def value
#				inter.value union_op.text_value union.value
#			end
#			}
#		/ inter
#	end
#	
#	rule union_op
#		'+' / '-'
#	end

	rule union
		union_a / union_b / inter
	end
	
	rule union_a
		inter s '+' s union {
			def value
				(inter.value + union.value).uniq
			end
			}
	end
	
	rule union_b
		inter s '-' s union {
			def value
				(inter.value - union.value)
			end
			}
	end
	
	
	rule inter
		elementary s inter_op s inter {
			def value
				elementary.value & inter.value
			end
			}
			
		 / elementary
	end

	rule inter_op
		'&'
	end
		
	rule elementary
		set / symbol / parenthesize
	end
	
	rule parenthesize
		'(' s union s ')'
	end
	
	rule s
		' '*
	end
	
end
